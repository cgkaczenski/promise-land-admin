generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id          String      @id @default(uuid())
  name        String
  billboardId String?
  description String?     @db.Text
  userId      String
  billboards  Billboard[] @relation("StoreToBillboard")
  categories  Category[]  @relation("StoreToCategory")
  products    Product[]   @relation("StoreToProduct")
  orders      Order[]     @relation("StoreToOrder")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  posts       Post[]      @relation("StoreToPost")
}

model Billboard {
  id         String     @id @default(uuid())
  storeId    String
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@index([storeId])
}

model Category {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  description String?   @db.Text
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  posts       Post[]    @relation("CategoryToPost")

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String      @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String // Foreign Key to Category
  category    Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  description String?     @db.Text
  price       Decimal
  isFeatured  Boolean     @default(false)
  isArchived  Boolean     @default(false)
  priceId     String
  images      Image[]     @relation("ProductToImage") // Relation to Image model
  orderItems  OrderItem[] // Relation to Order model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Post {
  id          String    @id @default(uuid())
  storeId     String // Foreign Key to Store
  store       Store     @relation("StoreToPost", fields: [storeId], references: [id])
  categoryId  String // Foreign Key to Category
  category    Category  @relation("CategoryToPost", fields: [categoryId], references: [id])
  name        String
  description String?   @db.Text
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  images      Image[]   @relation("PostToImage") // Relation to Image model
  date        DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id], onUpdate: Cascade)
  quantity  Int     @default(1)

  @@index([orderId])
  @@index([productId])
}

// Combined Image model that can be attached to either Post or Product
model Image {
  id  String @id @default(uuid())
  url String // URL of the image

  // Product relationship (optional)
  productId String? // Optional Foreign Key to Product
  product   Product? @relation("ProductToImage", fields: [productId], references: [id], onDelete: Cascade)

  // Post relationship (optional)
  postId String? // Optional Foreign Key to Post
  post   Post?   @relation("PostToImage", fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([postId])
}
